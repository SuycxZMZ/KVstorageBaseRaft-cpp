// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raftRPC.proto

#include "raftRPC.pb.h"
#include "raftRPC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace raftRpcProctoc {

static const char* raftRpc_method_names[] = {
  "/raftRpcProctoc.raftRpc/AppendEntries",
  "/raftRpcProctoc.raftRpc/InstallSnapshot",
  "/raftRpcProctoc.raftRpc/RequestVote",
};

std::unique_ptr< raftRpc::Stub> raftRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< raftRpc::Stub> stub(new raftRpc::Stub(channel));
  return stub;
}

raftRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AppendEntries_(raftRpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstallSnapshot_(raftRpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestVote_(raftRpc_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status raftRpc::Stub::AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::raftRpcProctoc::AppendEntriesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftRpcProctoc::AppendEntriesArgs, ::raftRpcProctoc::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

void raftRpc::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftRpcProctoc::AppendEntriesArgs, ::raftRpcProctoc::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, std::move(f));
}

void raftRpc::Stub::experimental_async::AppendEntries(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AppendEntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::AppendEntriesReply>* raftRpc::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftRpcProctoc::AppendEntriesReply, ::raftRpcProctoc::AppendEntriesArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AppendEntries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::AppendEntriesReply>* raftRpc::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::AppendEntriesArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendEntriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status raftRpc::Stub::InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::raftRpcProctoc::InstallSnapshotResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftRpcProctoc::InstallSnapshotRequest, ::raftRpcProctoc::InstallSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallSnapshot_, context, request, response);
}

void raftRpc::Stub::experimental_async::InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftRpcProctoc::InstallSnapshotRequest, ::raftRpcProctoc::InstallSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallSnapshot_, context, request, response, std::move(f));
}

void raftRpc::Stub::experimental_async::InstallSnapshot(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::InstallSnapshotResponse>* raftRpc::Stub::PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftRpcProctoc::InstallSnapshotResponse, ::raftRpcProctoc::InstallSnapshotRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallSnapshot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::InstallSnapshotResponse>* raftRpc::Stub::AsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstallSnapshotRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status raftRpc::Stub::RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::raftRpcProctoc::RequestVoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::raftRpcProctoc::RequestVoteArgs, ::raftRpcProctoc::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void raftRpc::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::raftRpcProctoc::RequestVoteArgs, ::raftRpcProctoc::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void raftRpc::Stub::experimental_async::RequestVote(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::RequestVoteReply>* raftRpc::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::raftRpcProctoc::RequestVoteReply, ::raftRpcProctoc::RequestVoteArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::raftRpcProctoc::RequestVoteReply>* raftRpc::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::raftRpcProctoc::RequestVoteArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

raftRpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      raftRpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< raftRpc::Service, ::raftRpcProctoc::AppendEntriesArgs, ::raftRpcProctoc::AppendEntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](raftRpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftRpcProctoc::AppendEntriesArgs* req,
             ::raftRpcProctoc::AppendEntriesReply* resp) {
               return service->AppendEntries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      raftRpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< raftRpc::Service, ::raftRpcProctoc::InstallSnapshotRequest, ::raftRpcProctoc::InstallSnapshotResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](raftRpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftRpcProctoc::InstallSnapshotRequest* req,
             ::raftRpcProctoc::InstallSnapshotResponse* resp) {
               return service->InstallSnapshot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      raftRpc_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< raftRpc::Service, ::raftRpcProctoc::RequestVoteArgs, ::raftRpcProctoc::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](raftRpc::Service* service,
             ::grpc::ServerContext* ctx,
             const ::raftRpcProctoc::RequestVoteArgs* req,
             ::raftRpcProctoc::RequestVoteReply* resp) {
               return service->RequestVote(ctx, req, resp);
             }, this)));
}

raftRpc::Service::~Service() {
}

::grpc::Status raftRpc::Service::AppendEntries(::grpc::ServerContext* context, const ::raftRpcProctoc::AppendEntriesArgs* request, ::raftRpcProctoc::AppendEntriesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status raftRpc::Service::InstallSnapshot(::grpc::ServerContext* context, const ::raftRpcProctoc::InstallSnapshotRequest* request, ::raftRpcProctoc::InstallSnapshotResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status raftRpc::Service::RequestVote(::grpc::ServerContext* context, const ::raftRpcProctoc::RequestVoteArgs* request, ::raftRpcProctoc::RequestVoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace raftRpcProctoc

